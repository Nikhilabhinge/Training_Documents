Docker Certification Training 

14th Dec 2024 - Day-0
Weekends - 7AM - 10AM IST


Actual Training Start from 21st Dec. 2024 - 7AM-10AM IST

Lab Environment 


	Create AWS Cloud Free Tier Account

	https://aws.amazon.com/console/

		- Active Email_ID, Mobile Number and Credit/Debit(International Transaction Enabled) 
		
		- Account Type : Basic Free Account 
		
		- 12 Months free - tier account 
		
		
	GitHub Repository Access 
	
	https://github.com/
	
########################
Day - 1  21st Dec. 2024
########################

	- Lab Environments 
		AWS Cloud / Azure Cloud 
			- To Create VMs and install Docker Engine 
			
	- GitHub Account 
		https://github.com/
		
	- DockerHub Account (Container Registry)
		https://hub.docker.com/
		
Introduction to Containerization :::

	Containerization : 
			- It is a process of packaging the Application along with its dependencies.!
	
	What is Virtual Machines?
	
		- VMs are considered as Hardware Level Virtualization.
		- VMs are created using Hypervisor.
		- VMs are used to run the Operator System.
		- VMs will be up and running, even if there no Active Application/Task.
		- VMs consume more time and space to start.
	
	What is Container?
	
		- Containers are considered as OS Level Virtualization.
		- Containers are created using Container Engine.
		- Containers are used to run the Application/Task. Container are not used to run any operator System.
		- Containers will go to exit state if there no Active Application/Task.
		- Containers consume less time and space to start when compared to VMs.

		- Kernel - Core of any Operating System
			- Namespace & CGroup
			
		- Containers will run in its own dedicated and isolated Address space	
		
		Containers are just to reduce the no. of VMs 
		We cannot completely eliminate VM.
		
	
	Architecture:
	
		Jenkins :::
			
			Master/Slave Architecture :
			
			Jenkins_Master(VM) 		: 	Create Jenkins Jobs & Schedule 
			
				Jenkins_Slaves(VM) 	: 	Execute the Builds
				
			Jenkins_Master 		:: Jenkins CICD Pipeline Projects.
			
				Jenkins_Slave1	: Install jdk - Java Application Build 
				Jenkins_Slave2	: Install sdk - .Net Application Build
				Jenkins_Slave3	: Python
				Jenkins_Slave4	: NodeJS
				Jenkins_Slave5	: Ruby
				Jenkins_Slave6	: Angular
				
			Using Container:
			
			Jenkins_Master(VM)		:: Jenkins CICD Pipeline Projects.
			
				Jenkins_Slave(VM)	: 
						Install Container Engine 
							C1 	: Install jdk - Java Application Build 
							C2	: Install sdk - .Net Application Build
							C3  : Python
							C4  : NodeJS
							C5  : Ruby
							C6  : Angular
						
		
		
	Containerization : 
			- It is a process of packaging the Application along with its dependencies.!

		
		
	Environment:
	
		Java Application :
		
			3-Tier 	Appli Service - sign_module
			
				- Front-End Layer 		C1
				- Application Layer 	C2 
				- BackEnd - DataBase	C3
			

	Containers ::
		
		Infra-Structure Perspective :
			
			- Containers are used to reduce the no. of VMs and reduce the Infra-Structure Cost.
			Master/Slave Architecture :
			
				Jenkins_Master(VM) 		: 	Create Jenkins Jobs & Schedule 
				
					Jenkins_Slaves(VM) 	: 	Execute the Builds
					
				Jenkins_Master 		:: Jenkins CICD Pipeline Projects.
				
					Jenkins_Slave1	: Install jdk - Java Application Build 
					Jenkins_Slave2	: Install sdk - .Net Application Build
					Jenkins_Slave3	: Python
					Jenkins_Slave4	: NodeJS
					Jenkins_Slave5	: Ruby
					Jenkins_Slave6	: Angular
					
				Using Container:
				
				Jenkins_Master(VM)		:: Jenkins CICD Pipeline Projects.
				
					Jenkins_Slave(VM)	: 
							Install Container Engine 
								C1 	: Install jdk - Java Application Build 
								C2	: Install sdk - .Net Application Build
								C3  : Python
								C4  : NodeJS
								C5  : Ruby
								C6  : Angular
	
		Developers' Perspective :
		
			- Developers usd the Docker to package the Application along with its dependencies and deploy to the target Environments!
			
			Eg.: 
			
				mywebapp.war_v1.0
				
			Deploy mywebapp.war_v1.0 to QA,UAT,PROD
			
			
			Environments 
			
				Dev :
				
					java app code - using jdk11
					Unit Test -> Tomcat WAS - tomcat_v8
				
				Application Build :

					It is a process of compiling the source code & Creating Artifacts - Binaries (*.war/*.jar/*.exec)
					mywebapp.war_v1.0
					
					Package the Application Artifacts(binaries-*.war) with all its dependencies
					
					Docker CE : Package --> Image 
						
						mywebapp.war_v1.0	
						
						Create Application Container Image : (mywebapp.war_v1.0,jdk11,tomcat8) - mywebappimg:v1.0 
						
						Publish the Application Container Image (mywebappimg:v1.0) to Container Registry.
						
						Deployed (mywebappimg:v1.0) to the Target Environments
						
				
				Build 		mywebapp.war_v1.0
				
				QA (VM)			mywebapp.war_v1.0			(mywebappimg:v1.0) 
							--> Container Engine 
									- Run as Container							
				
				UAT			mywebapp.war_v1.0
				
				PROD 		mywebapp.war_v1.0
		
		
			Application Build 				# Application Build Tools like Maven/Gradle - Create *.war file
			
			Application Image Build 		# Docker Engine and Docker Cli Commands		- Create Image
		
			
	Terminologies :::
	
		- Container Engine ::
			- Is used to Create and Manage the Container Images and Containers.
				
		- Container Images ::
			- Images are the static file which defines the properties of Application and its dependencies. 
			- Images are Non-Executable
			- Images composed of various Layers and it can be created using Dockerfile Instruction.
			
		- Container :
			- Containers are the executable units of Container Image
			- Containers are used to run the applications that are defined in the container images.
			
		- Container Registry :		
			- Container Registry is used store and manage the Container Images.
			- DockerHub - https://hub.docker.com/	
			
		- Container Repositories :
			- Container Repositories are the subset of Container Registry
			
			Eg.: 
			github 			Docker-Hub_Registry
				repo1			Docker-hub_Repository1
				repo2			Docker-hub_Repository2	

		
		Managed Services from Cloud Service Providers
		
			AWS 	- ECS,ECR,EKS
			
			Azure	- ACS,ACR,AKS 
			
			GCP 	- GCE,GCR,GKE
	
Next ::
	
	Working with Docker :



########################
Day - 2  22nd Dec. 2024
########################

	Working with Docker ::
	
		AWS Cloud - Create EC2 Instance - Ubuntu
		
		AWS Free Account :
		
			https://aws.amazon.com/console/
		

		- Active Email_ID, Mobile Number and Credit/Debit(International Transaction Enabled) 
		
		- Account Type : Basic Free Account 
		
		- 12 Months free - tier account 
			
			
		Upon Registration, Login to AWS Console as a root user using Email_ID
		
		1 VM --> 750 Hrs/Month 
		
		10 VMs --> 75Hrs/Month 
		
		
		
		VMs are refered as EC2 Instances 
		
		EC2 Instances Dashboard!
		
		
		Launch EC2 Instance - ubuntu v22.04 AMI
		
		VM1 ------------------> VM2 
		
		User Authentication ::
		
			- password 
			- token 
			- keys --
			
			
		Connect to EC2 Instance :
		
			- EC2 Instance Connect -- using web browser.
			
			- Using SSH Agent	
				--> Putty
				--> MoboXterm			# https://mobaxterm.mobatek.net/download-home-edition.html
										# Choose MobaXterm Home Edition!
										# Download, Extract and Run the Exec to Install MobaXterm.
				
					- Host Name 
					- User Name 
					- *.pem			# Private Key
					
			- Terminal
			
		Login to AWS EC2 Instance :
		
		sudo -i 
		
		sudo apt update -y
		
		Install Docker!				# https://docs.docker.com/engine/install/
		
		sudo apt install docker.io -y
		
	Use Docker Cli Command to interact with Docker Engine
		
		docker --version
		
		docker images 				# Get the list of Container Images 
 		
		docker ps 					# Get the list of Active/Running Containers

		docker ps -a 				# Get the list of all Active/Running and stopped Containers
		
		docker pull					# Download the Container Image from Container Registry(DockerHub)		
		
		docker pull <image_name>
		
		
		docker run <image_name>		# To Create and run the Container based on the Image Name
		
		Three Modes of Container Execution/Run :
		
			- Foreground Mode/ Attached Mode 		
						# Terminal will be used by container, till the process completes, that termial will be blocked by that container
						
					docker run <image_name>
			
			- Background Mode / Detached Mode
						# Runs in background as a background process.
						
					docker run -d <image_name>
					
			- Interactive Mode 
						# Access the Container in Interactive Mode 
						
					docker run -it <image_name>
					
					exit						To Exit from container					
					
			docker stop <container_id>
			
			docker start <container_id>
			
			docker exec -it <container_id> bash		# To login to the running Container.
			
			
			Delete/Remove :
			
				docker rm <container_id> <container_id> 		# Remove the Container
				
				docker rmi <image_name>							# Remove the Image 
				
				docker rmi -f <image_name>						# Force Remote the Image 
		
		
			docker inspect <object_name>	
			
				docker inspect <container_id> 
				docker inspect <image_name>
				docker inspect <volume>
				
			docker history <image_name>
    1  apt update -y
    2  clear
    3  apt install docker.io -y
    4  docker --version
    5  clear
    6  docker images
    7  docker ps
    8  docker ps -a
    9  clear
   10  docker images
   11  docker pull centos
   12  docker images
   13  docker ps
   14  docker ps -a
   15  docker pull alpine
   16  docker images
   17  clear
   18  docker images
   19  docker run centos
   20  docker images
   21  docker ps
   22  docker ps -a
   23  docker run alpine
   24  docker ps
   25  docker ps -a
   26  clear
   27  docker ps
   28  docker ps -a
   29  docker images
   30  clear
   31  docker ps
   32  docker ps -a
   33  docker run centos sleep 10
   34  docker run centos sleep 20
   35  docker run -d centos sleep 20
   36  docker ps
   37  clear
   38  docker images
   39  docker ps -a
   40  docker run -it centos bash
   41  docker run centos sleep 200
   42  clear
   43  docker run --name=dummy centos
   44*
   45  docker images
   46  docker ps
   47  docker rmi centos
   48  docker rm 162eec0bd282
   49  docker ps -a
   50  docker rm 91831b0d2c31 d6e0555e480f
   51  docker images
   52  docker ps -a
   53  docker rmi centos
   54  docker rmi -f centos
   55  docker images
   56  clear
   57  docker ps -a
   58  docker inspect 6519a20a5337
   59  docker inspect ubuntu
   60  clear
   61  docker history ubuntu
   62* docker
   63  docker history 6519a20a5337
   64  clear
   65  docker run -it ubuntu bash
   66  clear
   67  history		
